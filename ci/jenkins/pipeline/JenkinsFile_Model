pipeline{
	#agent的节点设置
	agent any
	agent none //设置为none时，就必须在每一个stage中指定运行的标签(这里可能会有代码不同步的问题，具体的应用场景还得看)
	agent{
		label "maven"
	}
	agent{
		node{
			label "maven"
			customWorkspace "/data/jenkins/workspace/maven/"
		}
	}
	
	#env流水线运行时的环境变量设置,分为流水线级别和stage级别
	environment{
		version=5.2.0
		buildType=maven
		jdk_version=1.8
	}
	
	#tools的配置
	需要在jenkins配置maven、jdk环境，名称为maven-3.5.3、jdk为Oracle_jdk8
	tools {
        maven 'maven'
        jdk   'Oracle_jdk8'
    }
	
	#options运行时选项
	options{
		#设置保存的记录数
		buildDiscarder(logRotator(numToKeepStr: '1'))
		
		#在检出代码时，创建目录，将代码放入文件夹中
		checkoutToSubdirectory('foo')
		
		#禁止并行构建
		disableConcurrentBuilds()
		
		#跳过代码检出
		skipDefaultCheckout()
		
		#设定流水线的超时时间(可用于阶段级别)
		timeout(time: 1,unit: "HOURS")
		
		#设定流水线的重试次数(可用于阶段级别)
		retry(3)
		
		#设置日志时间输出(可用于阶段级别)
		timestamps()
		
	}
	
	#参数化构建
	parameters{
		string(name: 'buildType', defaultValue: 'maven', description: '构建方式')
	}
	
	
	#触发器
	triggers{
		cron('H */7 * * 1-5')
	}
	
	#when 阶段运行控制，放在stage中,steps之前
		根据环境变量判断
		根据表达式判断
		根据条件判断
	when
	
	#任务
	#1. 一个stage下面只能有1个steps、stages或者parallel
	#2. 只有stage可以设置名字
	#任务嵌套

	stages{
        stage("build"){
            stages{
                stage("print param"){
					 when {
						//when进行判断，若变量ACTION的值是Deploy_to_development_environment，则执行这个步骤。
						//Deploy_to_development_environment是参数化构建里面配置好的。
						 equals expected: 'Deploy_to_development_environment', 
						 actual: ACTION
					}
                    steps{}
                }
                stage('checkcode') {
                    steps{
                    }
                } 
                stage("compile"){
                    steps{
                    }
                    
                }
                stage("sonarcheck"){
                    steps{
                    }  
                }
            }
        }
	}

	#任务并行
	stages{
        stage("并行父任务"){
			parallel{
				stage("并行任务1"){
					steps{}
				}
				stage("并行任务2"){
					steps{}
				}
				stage("并行任务3"){
					steps{}
				}
			}
        }
		stage("串行任务"){
			steps{
			}
		}
	}
	
	post{
		failure {
            //当此Pipeline失败时打印消息
            echo 'failure'
        }
		changed {
		   echo 'pipeline post changed'
		}
		always {
		   echo 'pipeline post always'
		}
		success {
		   echo 'pipeline post success'
		}
	}
}